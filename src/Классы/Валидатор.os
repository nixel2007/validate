#Использовать annotations
#Использовать decorator
#Использовать reflector

Перем КонтейнерАннотаций;
Перем ФабрикаВалидаций;

Перем Рефлектор;

// Валидирует объект на основании аннотаций его свойств и возвращает найденные нарушения.
//
// Параметры:
//   Объект - Произвольный - Экземпляр для проверки.
//
// Возвращаемое значение:
//   Массив из Нарушение - Список обнаруженных нарушений; пустой массив, если нарушений нет.
//
Функция Валидировать(Объект) Экспорт
	
	РезультатВалидации = Новый Массив;
	
	РефлекторОбъекта = Новый РефлекторОбъекта(Объект);
	Свойства = РефлекторОбъекта.ПолучитьТаблицуСвойств(Неопределено, Истина);

	Для Каждого Свойство Из Свойства Цикл
		
		Для Каждого Аннотация Из Свойство.Аннотации Цикл
			ОбработатьАннотацию(Объект, Свойство, Аннотация, РезультатВалидации);
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат РезультатВалидации;
	
КонецФункции

Процедура ОбработатьАннотацию(Объект, Свойство, Аннотация, РезультатВалидации)

	Если НЕ ФабрикаВалидаций.ЭтоАннотацияВалидации(Аннотация.Имя) Тогда
		Возврат;
	КонецЕсли;

	ОпределениеАннотации = КонтейнерАннотаций.ПолучитьОпределениеАннотации(Аннотация.Имя);
	Если ОпределениеАннотации = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Ограничение = ОпределениеАннотации.СоздатьОбъектАннотации(Аннотация);
	Валидация = ФабрикаВалидаций.СоздатьОбъектВалидации(Ограничение);

	ЗначениеСвойства = Рефлектор.ПолучитьСвойство(Объект, Свойство.Имя);

	Применение = Ограничение.Применение();

	Если Применение = ОбластиПримененияОграничения.Свойство Тогда
		ПроверитьСвойство(Объект, Свойство, Ограничение, Валидация, ЗначениеСвойства, РезультатВалидации);
		Возврат;
	КонецЕсли;

	ПроверитьКоллекцию(Объект, Свойство, Ограничение, Валидация, ЗначениеСвойства, Применение, РезультатВалидации);

КонецПроцедуры

Процедура ПроверитьСвойство(Объект, Свойство, Ограничение, Валидация, ЗначениеСвойства, РезультатВалидации)
	Если НЕ Валидация.ЗначениеВалидно(ЗначениеСвойства) Тогда
		Нарушение = Новый Нарушение(Объект, Свойство.Имя, Ограничение.Сообщение(), Ограничение.Код());
		РезультатВалидации.Добавить(Нарушение);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьКоллекцию(Объект, Свойство, Ограничение, Валидация, ЗначениеСвойства, Применение, РезультатВалидации)
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из ЗначениеСвойства Цикл
		Кандидат = КандидатПоПрименению(Применение, ЭлементКоллекции);
		ПроверитьСвойство(Объект, Свойство, Ограничение, Валидация, Кандидат, РезультатВалидации);
	КонецЦикла;

КонецПроцедуры

Функция КандидатПоПрименению(Применение, ЭлементКоллекции)
	
	Если Применение = ОбластиПримененияОграничения.Элемент Тогда

		Если ТипЗнч(ЭлементКоллекции) = Тип("КлючИЗначение") Тогда
			Возврат ЭлементКоллекции.Значение;
		Иначе
			Возврат ЭлементКоллекции;
		КонецЕсли;

	ИначеЕсли Применение = ОбластиПримененияОграничения.Ключ Тогда

		Если ТипЗнч(ЭлементКоллекции) = Тип("КлючИЗначение") Тогда
			Возврат ЭлементКоллекции.Ключ;
		Иначе
			Сообщение = СтрШаблон(
				"Ограничение с областью применения ""%1"" может быть применено только к коллекциям, содержащим КлючИЗначение как элементы.",
				Применение
			);
			ВызватьИсключение Сообщение;
		КонецЕсли;

	Иначе
		ВызватьИсключение "Неизвестная область применения ограничения " + Применение;
	КонецЕсли;

КонецФункции

// Формирует человекочитаемое текстовое описание списка нарушений валидации.
//
// Параметры:
//   РезультатВалидации - Массив - Массив объектов Нарушение.
//
// Возвращаемое значение:
//   Строка - Описание нарушений; пустая строка, если нарушений нет.
//
Функция ОписаниеОшибокВалидации(РезультатВалидации) Экспорт

	ТекстИсключения = "";

	Если РезультатВалидации.Количество() = 0 Тогда
		Возврат ТекстИсключения;
	КонецЕсли;
	
	Для Каждого Нарушение Из РезультатВалидации Цикл

		ОригинальныйТипОбъекта = ОбработкаДекоратора.ИсходныйТип(Нарушение.Объект());

		ОписаниеНарушения = СтрШаблон(
			"[%1]: Объект: %2, Свойство: %3, Сообщение: %4",
			Нарушение.Код(),
			ОригинальныйТипОбъекта,
			Нарушение.ИмяСвойства(),
			Нарушение.Сообщение()
		);
		ТекстИсключения = ТекстИсключения + ОписаниеНарушения + Символы.ПС;

	КонецЦикла;
	
	Возврат ТекстИсключения;
	
КонецФункции

// Инициализирует валидатор, фабрику валидаций и контейнер аннотаций.
// Параметры:
//   пФабрикаВалидаций   - ФабрикаВалидаций   - Фабрика валидаций; если Неопределено, создаётся стандартная.
//   пКонтейнерАннотаций - КонтейнерАннотаций - Контейнер аннотаций;
//                                              если Неопределено, регистрируются стандартные аннотации.
Процедура ПриСозданииОбъекта(пФабрикаВалидаций = Неопределено, пКонтейнерАннотаций = Неопределено)

	Рефлектор = Новый Рефлектор;

	Если пФабрикаВалидаций = Неопределено Тогда
		ФабрикаВалидаций = Новый СтандартнаяФабрикаВалидаций(ЭтотОбъект);
	Иначе
		ФабрикаВалидаций = пФабрикаВалидаций;
	КонецЕсли;

	Если пКонтейнерАннотаций = Неопределено Тогда
		КонтейнерАннотаций = Новый КонтейнерАннотаций;
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияВалидно"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияЗаполнено"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияИстина"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияЛожь"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияМаксимум"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияМинимум"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияТип"));
	Иначе
		КонтейнерАннотаций = пКонтейнерАннотаций;
	КонецЕсли;

КонецПроцедуры
