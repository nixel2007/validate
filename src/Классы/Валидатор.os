#Использовать annotations
#Использовать decorator
#Использовать reflector

#Область ОписаниеПеременных

Перем КонтейнерАннотаций;

Перем ФабрикаВалидаций;

Перем Рефлектор;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Валидирует объект на основании аннотаций его свойств и возвращает найденные нарушения.
//
// Параметры:
//   Объект - Произвольный - Экземпляр для проверки.
//
// Возвращаемое значение:
//   Массив из Нарушение - Список обнаруженных нарушений; пустой массив, если нарушений нет.
//
Функция Валидировать(Объект) Экспорт
	
	РезультатВалидации = Новый Массив;
	
	РефлекторОбъекта = Новый РефлекторОбъекта(Объект);
	Свойства = РефлекторОбъекта.ПолучитьТаблицуСвойств(Неопределено, Истина);

	Для Каждого Свойство Из Свойства Цикл
		
		ОбработатьАннотацииПоследовательно(Объект, Свойство, РезультатВалидации);
	
	КонецЦикла;
	
	Возврат РезультатВалидации;
	
КонецФункции


// Формирует человекочитаемое текстовое описание списка нарушений валидации.
//
// Параметры:
//   РезультатВалидации - Массив - Массив объектов Нарушение.
//
// Возвращаемое значение:
//   Строка - Описание нарушений; пустая строка, если нарушений нет.
//
Функция ОписаниеОшибокВалидации(РезультатВалидации) Экспорт

	ТекстИсключения = "";

	Если РезультатВалидации.Количество() = 0 Тогда
		Возврат ТекстИсключения;
	КонецЕсли;
	
	Для Каждого Нарушение Из РезультатВалидации Цикл

		ОригинальныйТипОбъекта = ОбработкаДекоратора.ИсходныйТип(Нарушение.Объект());

		ОписаниеНарушения = СтрШаблон(
			"[%1]: Объект: %2, Свойство: %3, Сообщение: %4",
			Нарушение.Код(),
			ОригинальныйТипОбъекта,
			Нарушение.ИмяСвойства(),
			Нарушение.Сообщение()
		);
		ТекстИсключения = ТекстИсключения + ОписаниеНарушения + Символы.ПС;

	КонецЦикла;
	
	Возврат ТекстИсключения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьАннотацииПоследовательно(Объект, Свойство, РезультатВалидации)

	ЗначениеСвойства = Рефлектор.ПолучитьСвойство(Объект, Свойство.Имя);
	ТекущийРежимДляКаждого = Неопределено; // "" | "Значение" | "Ключ"

	Для Каждого Аннотация Из Свойство.Аннотации Цикл
		ОпределениеАннотации = КонтейнерАннотаций.ПолучитьОпределениеАннотации(Аннотация.Имя);
		Если ОпределениеАннотации = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ОбъектАннотации = ОпределениеАннотации.СоздатьОбъектАннотации(Аннотация);

		// Директива &ДляКаждого - переключает режим обхода
		Если ТипЗнч(ОбъектАннотации) = Тип("АннотацияДляКаждого") Тогда
			ТекущийРежимДляКаждого = ОбъектАннотации.Режим();
			Продолжить;
		КонецЕсли;

		// Обычная аннотация-ограничение
		Если НЕ ФабрикаВалидаций.ЭтоАннотацияВалидации(Аннотация.Имя) Тогда
			Продолжить;
		КонецЕсли;

		Валидация = ФабрикаВалидаций.СоздатьОбъектВалидации(ОбъектАннотации);

		Если ТекущийРежимДляКаждого = Неопределено Тогда
			// Валидируем само свойство
			ПроверитьСвойство(Объект, Свойство, ОбъектАннотации, Валидация, ЗначениеСвойства, РезультатВалидации);
		Иначе
			// Валидируем элементы или ключи базового значения
			ПроверитьКоллекцию(Объект, Свойство, ОбъектАннотации, Валидация, ЗначениеСвойства, ТекущийРежимДляКаждого, РезультатВалидации);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьСвойство(Объект, Свойство, Ограничение, Валидация, ЗначениеСвойства, РезультатВалидации)
	Если НЕ Валидация.ЗначениеВалидно(ЗначениеСвойства) Тогда
		Нарушение = Новый Нарушение(Объект, Свойство.Имя, Ограничение.Сообщение(), Ограничение.Код());
		РезультатВалидации.Добавить(Нарушение);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьКоллекцию(Объект, Свойство, Ограничение, Валидация, Коллекция, РежимДляКаждого, РезультатВалидации)

	Если Коллекция = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементКоллекции Из Коллекция Цикл

		ПроверяемоеСвойство = ПроверяемыйЭлементКоллекции(РежимДляКаждого, ЭлементКоллекции);
		ПроверитьСвойство(Объект, Свойство, Ограничение, Валидация, ПроверяемоеСвойство, РезультатВалидации);
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверяемыйЭлементКоллекции(РежимДляКаждого, ЭлементКоллекции)
	
	Если РежимДляКаждого = "Значение" Тогда

		Если ТипЗнч(ЭлементКоллекции) = Тип("КлючИЗначение") Тогда
			Возврат ЭлементКоллекции.Значение;
		Иначе
			Возврат ЭлементКоллекции;
		КонецЕсли;

	ИначеЕсли РежимДляКаждого = "Ключ" Тогда

		Если ТипЗнч(ЭлементКоллекции) = Тип("КлючИЗначение") Тогда
			Возврат ЭлементКоллекции.Ключ;
		Иначе
			Сообщение = СтрШаблон(
				"Режим валидации ограничений &ДляКаждого(""%1"") может быть применено только к коллекциям, содержащим КлючИЗначение как элементы.",
				РежимДляКаждого
			);
			ВызватьИсключение Сообщение;
		КонецЕсли;

	Иначе
		ВызватьИсключение "Неизвестный режим валидации ограничений &ДляКаждого " + РежимДляКаждого;
	КонецЕсли;

КонецФункции

#КонецОбласти

// Инициализирует валидатор, фабрику валидаций и контейнер аннотаций.
// Параметры:
//   пФабрикаВалидаций   - ФабрикаВалидаций   - Фабрика валидаций; если Неопределено, создаётся стандартная.
//   пКонтейнерАннотаций - КонтейнерАннотаций - Контейнер аннотаций;
//                                              если Неопределено, регистрируются стандартные аннотации.
Процедура ПриСозданииОбъекта(пФабрикаВалидаций = Неопределено, пКонтейнерАннотаций = Неопределено)

	Рефлектор = Новый Рефлектор;

	Если пФабрикаВалидаций = Неопределено Тогда
		ФабрикаВалидаций = Новый СтандартнаяФабрикаВалидаций(ЭтотОбъект);
	Иначе
		ФабрикаВалидаций = пФабрикаВалидаций;
	КонецЕсли;

	Если пКонтейнерАннотаций = Неопределено Тогда
		КонтейнерАннотаций = Новый КонтейнерАннотаций;
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияВалидно"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияЗаполнено"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияИстина"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияЛожь"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияМаксимум"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияМинимум"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияТип"));
		КонтейнерАннотаций.ДобавитьАннотацию(Тип("АннотацияДляКаждого"));
	Иначе
		КонтейнерАннотаций = пКонтейнерАннотаций;
	КонецЕсли;

КонецПроцедуры
